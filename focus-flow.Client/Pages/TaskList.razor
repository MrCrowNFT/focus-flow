@page "/tasks"
@using focus_flow.Shared.models
@inject TaskService TaskService
@inject TagService TagService

<PageTitle>Task Management</PageTitle>

<div class="container mt-4">
    <h1>Task Management</h1>
    
    @if (loading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <!-- Create New Task Form -->
        <div class="card mb-4">
            <div class="card-header">
                <h3>Create New Task</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Task Title</label>
                    <input @bind="newTaskTitle" class="form-control" placeholder="Enter task title" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <textarea @bind="newTaskDescription" class="form-control" rows="3" placeholder="Enter task description"></textarea>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Start Date</label>
                        <input @bind="newTaskStartDate" class="form-control" type="datetime-local" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Due Date (Optional)</label>
                        <input @bind="newTaskDueDate" class="form-control" type="datetime-local" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Priority</label>
                        <select @bind="newTaskPriority" class="form-select">
                            <option value="@taskPriority.Low">Low</option>
                            <option value="@taskPriority.Medium">Medium</option>
                            <option value="@taskPriority.High">High</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Status</label>
                        <select @bind="newTaskStatus" class="form-select">
                            <option value="@taskStatus.Pending">Pending</option>
                            <option value="@taskStatus.InProgress">In Progress</option>
                            <option value="@taskStatus.Completed">Completed</option>
                        </select>
                    </div>
                </div>
                <button @onclick="CreateTask" class="btn btn-primary" disabled="@string.IsNullOrWhiteSpace(newTaskTitle)">
                    Create Task
                </button>
            </div>
        </div>

        <!-- Tasks List -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3>Tasks (@tasks.Count)</h3>
                <button @onclick="LoadTasks" class="btn btn-outline-secondary btn-sm">
                    <i class="bi bi-arrow-clockwise"></i> Refresh
                </button>
            </div>
            <div class="card-body">
                @if (tasks.Any())
                {
                    <div class="row">
                        @foreach (var task in tasks)
                        {
                            <div class="col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <h5 class="card-title">@task.Title</h5>
                                            <span class="badge @GetStatusBadgeClass(task.Status)">@task.Status</span>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(task.Description))
                                        {
                                            <p class="card-text">@task.Description</p>
                                        }
                                        
                                        <div class="row text-small mb-2" style="font-size: 0.875rem;">
                                            <div class="col-6">
                                                <strong>Start:</strong> @task.StartDate.ToString("MMM dd, yyyy")
                                            </div>
                                            @if (task.DueDate.HasValue)
                                            {
                                                <div class="col-6">
                                                    <strong>Due:</strong> @task.DueDate.Value.ToString("MMM dd, yyyy")
                                                </div>
                                            }
                                        </div>
                                        
                                        <div class="mb-2">
                                            <span class="badge @GetPriorityBadgeClass(task.Priority) me-2">@task.Priority Priority</span>
                                        </div>
                                        
                                        @if (task.Tags?.Any() == true)
                                        {
                                            <div class="mb-2">
                                                @foreach (var tag in task.Tags)
                                                {
                                                    <span class="badge bg-secondary me-1">@tag.Name</span>
                                                }
                                            </div>
                                        }
                                        
                                        <div class="btn-group" role="group">
                                            <button @onclick="() => EditTask(task)" class="btn btn-sm btn-outline-primary">
                                                Edit
                                            </button>
                                            <button @onclick="() => DeleteTask(task.Id)" class="btn btn-sm btn-outline-danger">
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center text-muted">
                        <p>No tasks found. Create your first task above!</p>
                    </div>
                }
            </div>
        </div>

        <!-- Tags Management -->
        <div class="card mt-4">
            <div class="card-header">
                <h3>Tags</h3>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-8">
                        <input @bind="newTagName" class="form-control" placeholder="Enter tag name" />
                    </div>
                    <div class="col-md-4">
                        <button @onclick="CreateTag" class="btn btn-success" disabled="@string.IsNullOrWhiteSpace(newTagName)">
                            Add Tag
                        </button>
                    </div>
                </div>
                
                @if (tags.Any())
                {
                    <div>
                        @foreach (var tag in tags)
                        {
                            <span class="badge bg-info me-2 mb-2 p-2">
                                @tag.Name
                                <button @onclick="() => DeleteTag(tag.Id)" class="btn-close btn-close-white ms-2" style="font-size: 0.6em;"></button>
                            </span>
                        }
                    </div>
                }
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
</div>

@code {
    private List<taskItem> tasks = new();
    private List<tag> tags = new();
    private bool loading = true;
    private string errorMessage = string.Empty;
    
    // Form fields
    private string newTaskTitle = string.Empty;
    private string newTaskDescription = string.Empty;
    private string newTagName = string.Empty;
    private DateTime newTaskStartDate = DateTime.Now;
    private DateTime? newTaskDueDate;
    private taskPriority newTaskPriority = taskPriority.Medium;
    private taskStatus newTaskStatus = taskStatus.Pending;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        errorMessage = string.Empty;
        
        try
        {
            await LoadTasks();
            await LoadTags();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadTasks()
    {
        try
        {
            tasks = await TaskService.GetTasksAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tasks: {ex.Message}";
        }
    }

    private async Task LoadTags()
    {
        try
        {
            tags = await TagService.GetTagsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tags: {ex.Message}";
        }
    }

    private async Task CreateTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskTitle)) return;

        try
        {
            var newTask = new taskItem
            {
                Title = newTaskTitle,
                Description = newTaskDescription,
                StartDate = newTaskStartDate,
                DueDate = newTaskDueDate,
                Priority = newTaskPriority,
                Status = newTaskStatus,
                Tags = new List<tag>()
            };

            var createdTask = await TaskService.CreateTaskAsync(newTask);
            tasks.Add(createdTask);
            
            // Clear form
            newTaskTitle = string.Empty;
            newTaskDescription = string.Empty;
            newTaskStartDate = DateTime.Now;
            newTaskDueDate = null;
            newTaskPriority = taskPriority.Medium;
            newTaskStatus = taskStatus.Pending;
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating task: {ex.Message}";
        }
    }

    private async Task DeleteTask(int taskId)
    {
        try
        {
            var success = await TaskService.DeleteTaskAsync(taskId);
            if (success)
            {
                tasks.RemoveAll(t => t.Id == taskId);
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Task not found or could not be deleted.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting task: {ex.Message}";
        }
    }

    private async Task CreateTag()
    {
        if (string.IsNullOrWhiteSpace(newTagName)) return;

        try
        {
            var newTag = new tag
            {
                Name = newTagName
            };

            var createdTag = await TagService.CreateTagAsync(newTag);
            tags.Add(createdTag);
            
            newTagName = string.Empty;
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating tag: {ex.Message}";
        }
    }

    private async Task DeleteTag(int tagId)
    {
        try
        {
            var success = await TagService.DeleteTagAsync(tagId);
            if (success)
            {
                tags.RemoveAll(t => t.Id == tagId);
                errorMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting tag: {ex.Message}";
        }
    }

    private void EditTask(taskItem task)
    {
        // TODO: Implement edit functionality
        // You could show a modal or navigate to an edit page
        Console.WriteLine($"Edit task: {task.Title}");
    }

    // Helper methods for badge styling
    private string GetStatusBadgeClass(taskStatus status)
    {
        return status switch
        {
            taskStatus.Pending => "bg-warning text-dark",
            taskStatus.InProgress => "bg-info text-dark",
            taskStatus.Completed => "bg-success",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityBadgeClass(taskPriority priority)
    {
        return priority switch
        {
            taskPriority.Low => "bg-light text-dark",
            taskPriority.Medium => "bg-primary",
            taskPriority.High => "bg-danger",
            _ => "bg-secondary"
        };
    }
}