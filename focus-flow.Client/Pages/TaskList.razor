@page "/tasks"
@using focus_flow.Shared.models
@inject TaskService TaskService
@inject TagService TagService
@inject IJSRuntime JSRuntime

<PageTitle>Task Management</PageTitle>

<div class="container mt-4">
    <h1>Task Management</h1>
    
    @if (loading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <!-- Create New Task Form -->
        <div class="card mb-4">
            <div class="card-header">
                <h3>Create New Task</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Task Title</label>
                    <input @bind="newTaskTitle" @bind:event="oninput" class="form-control" placeholder="Enter task title" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <textarea @bind="newTaskDescription" @bind:event="oninput" class="form-control" rows="3" placeholder="Enter task description"></textarea>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Start Date</label>
                        <input @bind="newTaskStartDate" class="form-control" type="datetime-local" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Due Date (Optional)</label>
                        <input @bind="newTaskDueDate" class="form-control" type="datetime-local" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Priority</label>
                        <select @bind="newTaskPriority" class="form-select">
                            <option value="@taskPriority.Low">Low</option>
                            <option value="@taskPriority.Medium">Medium</option>
                            <option value="@taskPriority.High">High</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Status</label>
                        <select @bind="newTaskStatus" class="form-select">
                            <option value="@taskStatus.Pending">Pending</option>
                            <option value="@taskStatus.InProgress">In Progress</option>
                            <option value="@taskStatus.Completed">Completed</option>
                        </select>
                    </div>
                </div>
                <button @onclick="CreateTask" class="btn btn-primary" disabled="@(isCreatingTask || string.IsNullOrWhiteSpace(newTaskTitle))">
                    @if (isCreatingTask)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    Create Task
                </button>
            </div>
        </div>

        <!-- Tasks List -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3>Tasks (@tasks.Count)</h3>
                <button @onclick="LoadTasks" class="btn btn-outline-secondary btn-sm" disabled="@isLoadingTasks">
                    @if (isLoadingTasks)
                    {
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                    }
                    else
                    {
                        <i class="bi bi-arrow-clockwise"></i>
                    }
                    Refresh
                </button>
            </div>
            <div class="card-body">
                @if (tasks.Any())
                {
                    <div class="row">
                        @foreach (var task in tasks)
                        {
                            <div class="col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-start mb-2">
                                            <h5 class="card-title">@task.Title</h5>
                                            <span class="badge @GetStatusBadgeClass(task.Status)">@task.Status</span>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(task.Description))
                                        {
                                            <p class="card-text">@task.Description</p>
                                        }
                                        
                                        <div class="row text-small mb-2" style="font-size: 0.875rem;">
                                            <div class="col-6">
                                                <strong>Start:</strong> @task.StartDate.ToString("MMM dd, yyyy")
                                            </div>
                                            @if (task.DueDate.HasValue)
                                            {
                                                <div class="col-6">
                                                    <strong>Due:</strong> @task.DueDate.Value.ToString("MMM dd, yyyy")
                                                </div>
                                            }
                                        </div>
                                        
                                        <div class="mb-2">
                                            <span class="badge @GetPriorityBadgeClass(task.Priority) me-2">@task.Priority Priority</span>
                                        </div>
                                        
                                        @if (task.Tags?.Any() == true)
                                        {
                                            <div class="mb-2">
                                                @foreach (var tag in task.Tags)
                                                {
                                                    <span class="badge bg-secondary me-1">@tag.Name</span>
                                                }
                                            </div>
                                        }
                                        
                                        <div class="btn-group" role="group">
                                            <button @onclick="() => EditTask(task)" class="btn btn-sm btn-outline-primary">
                                                Edit
                                            </button>
                                            <button @onclick="() => DeleteTask(task.Id)" class="btn btn-sm btn-outline-danger" 
                                                    disabled="@(deletingTaskIds.Contains(task.Id))">
                                                @if (deletingTaskIds.Contains(task.Id))
                                                {
                                                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                                }
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center text-muted">
                        <p>No tasks found. Create your first task above!</p>
                    </div>
                }
            </div>
        </div>

        <!-- Tags Management -->
        <div class="card mt-4">
            <div class="card-header">
                <h3>Tags</h3>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-8">
                        <input @bind="newTagName" @bind:event="oninput" class="form-control" placeholder="Enter tag name" />
                    </div>
                    <div class="col-md-4">
                        <button @onclick="CreateTag" class="btn btn-success" disabled="@(isCreatingTag || string.IsNullOrWhiteSpace(newTagName))">
                            @if (isCreatingTag)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Add Tag
                        </button>
                    </div>
                </div>
                
                @if (tags.Any())
                {
                    <div>
                        @foreach (var tag in tags)
                        {
                            <span class="badge bg-info me-2 mb-2 p-2">
                                @tag.Name
                                <button @onclick="() => DeleteTag(tag.Id)" class="btn-close btn-close-white ms-2" 
                                        style="font-size: 0.6em;" disabled="@(deletingTagIds.Contains(tag.Id))"></button>
                            </span>
                        }
                    </div>
                }
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="ClearError"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3" role="alert">
            <strong>Success:</strong> @successMessage
            <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
        </div>
    }
</div>

@code {
    private List<taskItem> tasks = new();
    private List<tag> tags = new();
    private bool loading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    // Loading states
    private bool isCreatingTask = false;
    private bool isCreatingTag = false;
    private bool isLoadingTasks = false;
    private HashSet<int> deletingTaskIds = new();
    private HashSet<int> deletingTagIds = new();
    
    // Form fields
    private string newTaskTitle = string.Empty;
    private string newTaskDescription = string.Empty;
    private string newTagName = string.Empty;
    private DateTime newTaskStartDate = DateTime.Now;
    private DateTime? newTaskDueDate;
    private taskPriority newTaskPriority = taskPriority.Medium;
    private taskStatus newTaskStatus = taskStatus.Pending;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        ClearMessages();
        
        try
        {
            await Task.WhenAll(LoadTasks(), LoadTags());
            await LogToConsole("Data loaded successfully");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            await LogToConsole($"Error loading data: {ex}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadTasks()
    {
        isLoadingTasks = true;
        try
        {
            await LogToConsole("Loading tasks...");
            tasks = await TaskService.GetTasksAsync();
            await LogToConsole($"Loaded {tasks.Count} tasks");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tasks: {ex.Message}";
            await LogToConsole($"Error loading tasks: {ex}");
        }
        finally
        {
            isLoadingTasks = false;
            StateHasChanged();
        }
    }

    private async Task LoadTags()
    {
        try
        {
            await LogToConsole("Loading tags...");
            tags = await TagService.GetTagsAsync();
            await LogToConsole($"Loaded {tags.Count} tags");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tags: {ex.Message}";
            await LogToConsole($"Error loading tags: {ex}");
        }
    }

    private async Task CreateTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskTitle)) return;

        isCreatingTask = true;
        ClearMessages();
        
        try
        {
            await LogToConsole($"Creating task: {newTaskTitle}");
            
            var newTask = new taskItem
            {
                Title = newTaskTitle.Trim(),
                Description = newTaskDescription?.Trim() ?? "",
                StartDate = newTaskStartDate,
                DueDate = newTaskDueDate,
                Priority = newTaskPriority,
                Status = newTaskStatus,
                Tags = new List<tag>()
            };

            var createdTask = await TaskService.CreateTaskAsync(newTask);
            tasks.Add(createdTask);
            
            // Clear form
            ResetTaskForm();
            successMessage = "Task created successfully!";
            await LogToConsole($"Task created: {createdTask.Title} with ID: {createdTask.Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating task: {ex.Message}";
            await LogToConsole($"Error creating task: {ex}");
        }
        finally
        {
            isCreatingTask = false;
            StateHasChanged();
        }
    }

    private async Task DeleteTask(int taskId)
    {
        deletingTaskIds.Add(taskId);
        ClearMessages();
        
        try
        {
            await LogToConsole($"Deleting task with ID: {taskId}");
            var success = await TaskService.DeleteTaskAsync(taskId);
            if (success)
            {
                tasks.RemoveAll(t => t.Id == taskId);
                successMessage = "Task deleted successfully!";
                await LogToConsole($"Task {taskId} deleted successfully");
            }
            else
            {
                errorMessage = "Task not found or could not be deleted.";
                await LogToConsole($"Failed to delete task {taskId}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting task: {ex.Message}";
            await LogToConsole($"Error deleting task {taskId}: {ex}");
        }
        finally
        {
            deletingTaskIds.Remove(taskId);
            StateHasChanged();
        }
    }

    private async Task CreateTag()
    {
        if (string.IsNullOrWhiteSpace(newTagName)) return;

        isCreatingTag = true;
        ClearMessages();
        
        try
        {
            await LogToConsole($"Creating tag: {newTagName}");
            
            var newTag = new tag
            {
                Name = newTagName.Trim()
            };

            var createdTag = await TagService.CreateTagAsync(newTag);
            tags.Add(createdTag);
            
            newTagName = string.Empty;
            successMessage = "Tag created successfully!";
            await LogToConsole($"Tag created: {createdTag.Name} with ID: {createdTag.Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating tag: {ex.Message}";
            await LogToConsole($"Error creating tag: {ex}");
        }
        finally
        {
            isCreatingTag = false;
            StateHasChanged();
        }
    }

    private async Task DeleteTag(int tagId)
    {
        deletingTagIds.Add(tagId);
        ClearMessages();
        
        try
        {
            await LogToConsole($"Deleting tag with ID: {tagId}");
            var success = await TagService.DeleteTagAsync(tagId);
            if (success)
            {
                tags.RemoveAll(t => t.Id == tagId);
                successMessage = "Tag deleted successfully!";
                await LogToConsole($"Tag {tagId} deleted successfully");
            }
            else
            {
                errorMessage = "Tag not found or could not be deleted.";
                await LogToConsole($"Failed to delete tag {tagId}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting tag: {ex.Message}";
            await LogToConsole($"Error deleting tag {tagId}: {ex}");
        }
        finally
        {
            deletingTagIds.Remove(tagId);
            StateHasChanged();
        }
    }

    private void EditTask(taskItem task)
    {
        // TODO: Implement edit functionality
        // You could show a modal or navigate to an edit page
        Console.WriteLine($"Edit task: {task.Title}");
    }

    private void ResetTaskForm()
    {
        newTaskTitle = string.Empty;
        newTaskDescription = string.Empty;
        newTaskStartDate = DateTime.Now;
        newTaskDueDate = null;
        newTaskPriority = taskPriority.Medium;
        newTaskStatus = taskStatus.Pending;
    }

    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private void ClearError() => errorMessage = string.Empty;
    private void ClearSuccess() => successMessage = string.Empty;

    private async Task LogToConsole(string message)
    {
        await JSRuntime.InvokeVoidAsync("console.log", $"[TaskManagement] {DateTime.Now:HH:mm:ss}: {message}");
    }

    // Helper methods for badge styling
    private string GetStatusBadgeClass(taskStatus status)
    {
        return status switch
        {
            taskStatus.Pending => "bg-warning text-dark",
            taskStatus.InProgress => "bg-info text-dark",
            taskStatus.Completed => "bg-success",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityBadgeClass(taskPriority priority)
    {
        return priority switch
        {
            taskPriority.Low => "bg-light text-dark",
            taskPriority.Medium => "bg-primary",
            taskPriority.High => "bg-danger",
            _ => "bg-secondary"
        };
    }
}